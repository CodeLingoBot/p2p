// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/dht.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DHTPacketType int32

const (
	DHTPacketType_Undefined     DHTPacketType = 0
	DHTPacketType_Connect       DHTPacketType = 1
	DHTPacketType_Forward       DHTPacketType = 2
	DHTPacketType_Find          DHTPacketType = 3
	DHTPacketType_Node          DHTPacketType = 4
	DHTPacketType_Ping          DHTPacketType = 5
	DHTPacketType_RegisterProxy DHTPacketType = 6
	DHTPacketType_RequestProxy  DHTPacketType = 7
	DHTPacketType_ReportProxy   DHTPacketType = 8
	DHTPacketType_BadProxy      DHTPacketType = 9
	DHTPacketType_Proxy         DHTPacketType = 10
	DHTPacketType_Notify        DHTPacketType = 11
	DHTPacketType_ReportLoad    DHTPacketType = 12
	DHTPacketType_Stop          DHTPacketType = 13
	DHTPacketType_Unknown       DHTPacketType = 14
	DHTPacketType_DHCP          DHTPacketType = 15
	DHTPacketType_Error         DHTPacketType = 16
	DHTPacketType_Unsupported   DHTPacketType = 17
	DHTPacketType_State         DHTPacketType = 18
)

var DHTPacketType_name = map[int32]string{
	0:  "Undefined",
	1:  "Connect",
	2:  "Forward",
	3:  "Find",
	4:  "Node",
	5:  "Ping",
	6:  "RegisterProxy",
	7:  "RequestProxy",
	8:  "ReportProxy",
	9:  "BadProxy",
	10: "Proxy",
	11: "Notify",
	12: "ReportLoad",
	13: "Stop",
	14: "Unknown",
	15: "DHCP",
	16: "Error",
	17: "Unsupported",
	18: "State",
}
var DHTPacketType_value = map[string]int32{
	"Undefined":     0,
	"Connect":       1,
	"Forward":       2,
	"Find":          3,
	"Node":          4,
	"Ping":          5,
	"RegisterProxy": 6,
	"RequestProxy":  7,
	"ReportProxy":   8,
	"BadProxy":      9,
	"Proxy":         10,
	"Notify":        11,
	"ReportLoad":    12,
	"Stop":          13,
	"Unknown":       14,
	"DHCP":          15,
	"Error":         16,
	"Unsupported":   17,
	"State":         18,
}

func (x DHTPacketType) String() string {
	return proto.EnumName(DHTPacketType_name, int32(x))
}
func (DHTPacketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dht_8e8b5f4a83005f57, []int{0}
}

type DHTPacket struct {
	Type                 DHTPacketType `protobuf:"varint,1,opt,name=type,proto3,enum=main.DHTPacketType" json:"type,omitempty"`
	Id                   string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Infohash             string        `protobuf:"bytes,3,opt,name=infohash,proto3" json:"infohash,omitempty"`
	Data                 string        `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Query                string        `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	Arguments            []string      `protobuf:"bytes,6,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Proxies              []string      `protobuf:"bytes,7,rep,name=proxies,proto3" json:"proxies,omitempty"`
	Extra                string        `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`
	Payload              []byte        `protobuf:"bytes,9,opt,name=payload,proto3" json:"payload,omitempty"`
	Version              int32         `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DHTPacket) Reset()         { *m = DHTPacket{} }
func (m *DHTPacket) String() string { return proto.CompactTextString(m) }
func (*DHTPacket) ProtoMessage()    {}
func (*DHTPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_dht_8e8b5f4a83005f57, []int{0}
}
func (m *DHTPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHTPacket.Unmarshal(m, b)
}
func (m *DHTPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHTPacket.Marshal(b, m, deterministic)
}
func (dst *DHTPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHTPacket.Merge(dst, src)
}
func (m *DHTPacket) XXX_Size() int {
	return xxx_messageInfo_DHTPacket.Size(m)
}
func (m *DHTPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_DHTPacket.DiscardUnknown(m)
}

var xxx_messageInfo_DHTPacket proto.InternalMessageInfo

func (m *DHTPacket) GetType() DHTPacketType {
	if m != nil {
		return m.Type
	}
	return DHTPacketType_Undefined
}

func (m *DHTPacket) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DHTPacket) GetInfohash() string {
	if m != nil {
		return m.Infohash
	}
	return ""
}

func (m *DHTPacket) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *DHTPacket) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *DHTPacket) GetArguments() []string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *DHTPacket) GetProxies() []string {
	if m != nil {
		return m.Proxies
	}
	return nil
}

func (m *DHTPacket) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

func (m *DHTPacket) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DHTPacket) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*DHTPacket)(nil), "main.DHTPacket")
	proto.RegisterEnum("main.DHTPacketType", DHTPacketType_name, DHTPacketType_value)
}

func init() { proto.RegisterFile("protocol/dht.proto", fileDescriptor_dht_8e8b5f4a83005f57) }

var fileDescriptor_dht_8e8b5f4a83005f57 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x41, 0x6e, 0xdb, 0x30,
	0x10, 0x45, 0x2b, 0x5b, 0xb2, 0xa5, 0xb1, 0x64, 0x8f, 0xa7, 0x1b, 0x2e, 0xd5, 0xae, 0x84, 0x2e,
	0x5c, 0xa0, 0xbd, 0x41, 0x93, 0x06, 0x59, 0x14, 0x81, 0xe1, 0xc4, 0x07, 0x60, 0xcd, 0xb1, 0x4d,
	0x24, 0xe1, 0x28, 0x14, 0xdd, 0x58, 0x47, 0xe8, 0xa5, 0x7a, 0xb6, 0x82, 0x72, 0x51, 0x20, 0xbb,
	0xff, 0xdf, 0xe7, 0xe7, 0x0c, 0x30, 0x40, 0xad, 0x97, 0x20, 0x3b, 0x79, 0xfa, 0x6c, 0x8e, 0x61,
	0x35, 0x18, 0x4a, 0x9f, 0xb5, 0x75, 0x1f, 0xff, 0x24, 0x50, 0x5c, 0xdf, 0x3e, 0xac, 0xf5, 0xee,
	0x91, 0x03, 0x7d, 0x80, 0x34, 0xf4, 0x2d, 0xab, 0xa4, 0x4e, 0x9a, 0xf9, 0x97, 0xf7, 0xab, 0xf8,
	0x64, 0xf5, 0x3f, 0x7e, 0xe8, 0x5b, 0x26, 0x80, 0x91, 0x35, 0x6a, 0x54, 0x27, 0x4d, 0x41, 0x08,
	0xb9, 0x75, 0x7b, 0x39, 0xea, 0xee, 0xa8, 0xc6, 0x03, 0x29, 0x21, 0x35, 0x3a, 0x68, 0x95, 0x0e,
	0xae, 0x82, 0xec, 0xe5, 0xc4, 0xbe, 0x57, 0xd9, 0x60, 0x97, 0x50, 0x68, 0x7f, 0x38, 0x3d, 0xb3,
	0x0b, 0x9d, 0x9a, 0xd4, 0xe3, 0xa6, 0xa0, 0x05, 0x4c, 0x5b, 0x2f, 0x67, 0xcb, 0x9d, 0x9a, 0x0e,
	0xa0, 0x82, 0x8c, 0xcf, 0xc1, 0x6b, 0x95, 0x0f, 0x95, 0x98, 0xeb, 0xfe, 0x49, 0xb4, 0x51, 0x45,
	0x9d, 0x34, 0x65, 0x04, 0xbf, 0xd8, 0x77, 0x56, 0x9c, 0x82, 0x3a, 0x69, 0xb2, 0x4f, 0xbf, 0x47,
	0x50, 0xbd, 0xdd, 0xb0, 0x82, 0x62, 0xeb, 0x0c, 0xef, 0xad, 0x63, 0x83, 0xef, 0x68, 0x06, 0xd3,
	0x2b, 0x71, 0x8e, 0x77, 0x01, 0x93, 0x68, 0x6e, 0xc4, 0xbf, 0x6a, 0x6f, 0x70, 0x44, 0x39, 0xa4,
	0x37, 0xd6, 0x19, 0x1c, 0x47, 0x75, 0x27, 0x86, 0x31, 0x8d, 0x6a, 0x6d, 0xdd, 0x01, 0x33, 0x5a,
	0x42, 0xb5, 0xe1, 0x83, 0xed, 0x02, 0xfb, 0xb5, 0x97, 0x73, 0x8f, 0x13, 0x42, 0x28, 0x37, 0xfc,
	0x72, 0xe2, 0x2e, 0x5c, 0xc8, 0x94, 0x16, 0x30, 0xdb, 0x70, 0x2b, 0xfe, 0x1f, 0xc8, 0xa9, 0x84,
	0xfc, 0x9b, 0x36, 0x17, 0x57, 0x50, 0x01, 0xd9, 0x45, 0x02, 0x01, 0x4c, 0xee, 0x24, 0xd8, 0x7d,
	0x8f, 0x33, 0x9a, 0x03, 0x5c, 0x5a, 0x3f, 0x44, 0x1b, 0x2c, 0xe3, 0xd0, 0xfb, 0x20, 0x2d, 0x56,
	0x71, 0xbf, 0xad, 0x7b, 0x74, 0xf2, 0xea, 0x70, 0x1e, 0xf1, 0xf5, 0xed, 0xd5, 0x1a, 0x17, 0xf1,
	0x9f, 0xef, 0xde, 0x8b, 0x47, 0x8c, 0x13, 0xb7, 0xae, 0x3b, 0xb5, 0xb1, 0xce, 0x06, 0x97, 0x31,
	0xbb, 0x0f, 0x3a, 0x30, 0xd2, 0xcf, 0xc9, 0x70, 0xd9, 0xaf, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xea, 0x1f, 0x5b, 0xe4, 0xef, 0x01, 0x00, 0x00,
}
